AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Lambda and API Gateway resources for Virtual Slide Viewer'
Parameters:
  Subnets:
    Type: CommaDelimitedList
    Description: 'The list of Subnet IDs, for at least two Availability Zones in the region in your Virtual Private Cloud (VPC)'
  FileSystem:
    Type: String
    Description: File system id of EfsFileSystem
  SecurityGroup:
    Type: String
    Description: Security group id of EfsLambdaSecurityGroup
  AccessPointId:
    Type: String
    Description: ID of AccessPoint
  AccessPointArn:
    Type: String
    Description: ARN of AccessPoint
  EnvType:
    Description: Runtime environment type.
    Default: dev
    Type: String
    ConstraintDescription: must specify prod, dev, or test.
  StageName:
    Description: Deployment stage name.
    Default: dev
    Type: String
  AllowOrigin:
    Description: CORS allowed origin.
    Type: String
  ImagesPath:
    Description: File system path to image files.
    Default: '/mnt/lambda'
    Type: String
  TableName:
    Description: Slide table for image metadata.
    Type: String

Conditions:
  UseStageName: !Not [!Equals [!Ref StageName, '']]

Globals:
  Api:
    OpenApiVersion: '3.0.3'
  Function:
    Environment:
      Variables:
        IMAGES_PATH: !Ref ImagesPath
        ENV_TYPE: !Ref EnvType

Resources:
  ImageRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: vsv
      Handler: imagerequest.lambda_handler
      Runtime: python3.8
      Timeout: 15
      MemorySize: 640
      FunctionName: !Sub ${AWS::StackName}-ImageRequestFunction
      Environment:
        Variables:
          ALLOW_ORIGIN: !Ref AllowOrigin
      AutoPublishAlias: !Ref EnvType
      Layers:
        - !Ref OpenSlide
        - !Ref PillowSIMD
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystem
            AccessPoint: !Ref AccessPointId
      VpcConfig:
        SecurityGroupIds:
          - Ref: SecurityGroup
        SubnetIds: !Ref Subnets
      FileSystemConfigs:
          - Arn: !Ref AccessPointArn
            LocalMountPath: !Ref ImagesPath
      Events:
        ImagesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ImagesApi
            Path: /DeepZoom/{imagePath+}
            Method: GET
  FindNewFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: vsv
      Handler: findnewfiles.lambda_handler
      Runtime: python3.8
      Timeout: 30
      MemorySize: 128
      FunctionName: !Sub ${AWS::StackName}-FindNewFilesFunction
      Environment:
        Variables:
          FILE_FUNCTION_NAME: !Sub ${AWS::StackName}-ProcessFileFunction
      AutoPublishAlias: !Ref EnvType
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystem
            AccessPoint: !Ref AccessPointId
        - LambdaInvokePolicy:
            FunctionName: !Sub ${AWS::StackName}-ProcessFileFunction
      VpcConfig:
        SecurityGroupIds:
          - Ref: SecurityGroup
        SubnetIds: !Ref Subnets
      FileSystemConfigs:
          - Arn: !Ref AccessPointArn
            LocalMountPath: !Ref ImagesPath
      Events:
        DataSyncSuccess:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: [aws.datasync]
              detail-type: [DataSync Task Execution State Change]
              detail:
                State: [SUCCESS]
  ProcessFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: vsv
      Handler: processfile.lambda_handler
      Runtime: python3.8
      Timeout: 450
      MemorySize: 1536
      FunctionName: !Sub ${AWS::StackName}-ProcessFileFunction
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      AutoPublishAlias: !Ref EnvType
      Layers:
        - !Ref OpenSlide
        - !Ref PillowSIMD
        - !Ref libdmtx
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystem
            AccessPoint: !Ref AccessPointId
        - DynamoDBWritePolicy:
            TableName: !Ref TableName
      VpcConfig:
        SecurityGroupIds:
          - Ref: SecurityGroup
        SubnetIds: !Ref Subnets
      FileSystemConfigs:
          - Arn: !Ref AccessPointArn
            LocalMountPath: !Ref ImagesPath
  CheckFileTransferStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: vsv
      Handler: checkfiletransferstatus.lambda_handler
      Runtime: python3.8
      Timeout: 300
      MemorySize: 256
      FunctionName: !Sub ${AWS::StackName}-CheckFileTransferStatusFunction
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      AutoPublishAlias: !Ref EnvType
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystem
            AccessPoint: !Ref AccessPointId
        - DynamoDBReadPolicy:
            TableName: !Ref TableName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - datasync:DescribeTask
                - datasync:StartTaskExecution
              Resource: 'arn:aws:datasync:us-east-2:839559484193:task/task-029ab23ed41f8d713'
      VpcConfig:
        SecurityGroupIds:
          - Ref: SecurityGroup
        SubnetIds: !Ref Subnets
      FileSystemConfigs:
          - Arn: !Ref AccessPointArn
            LocalMountPath: !Ref ImagesPath
      Events:
        ImagesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ImagesApi
            Path: /CheckFileTransferStatus
            Method: PUT
  OpenSlide:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: openslide
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: makefile
  PillowSIMD:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: pillow-simd
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: makefile
  libdmtx:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: libdmtx
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: makefile
  ImagesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      BinaryMediaTypes: ['image/*']
      EndpointConfiguration:
        Type: REGIONAL

Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !If
      - UseStageName
      - !Sub https://${ImagesApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/
      - !Sub https://${ImagesApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/]
  ApiId:
    Description: Api id of ImagesApi
    Value: !Ref ImagesApi
