AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'virtual-slide-viewer-backend

  SAM Template for virtual-slide-viewer-backend

  '
Parameters:
  VpcId:
    Type: String
    Description: 'ID of your existing Virtual Private Cloud (VPC)'
  SubnetIds:
    Type: CommaDelimitedList
    Description: 'The list of Subnet IDs, for at least two Availability Zones in the region in your Virtual Private Cloud (VPC)'
  FileSystemId:
    Type: String
    Description: File system id of EfsFileSystem
  SecurityGroupId:
    Type: String
    Description: Security group id of EfsLambdaSecurityGroup
  AccessPointId:
    Type: String
    Description: ID of AccessPoint
  AccessPointArn:
    Type: String
    Description: ARN of AccessPoint
  EnvType:
    Description: Runtime environment type.
    Default: dev
    Type: String
    AllowedValues: [prod, dev, test]
    ConstraintDescription: must specify prod, dev, or test.
  StageName:
    Description: Deployment stage name.
    Default: dev
    Type: String
  AllowOrigin:
    Description: CORS allowed origin.
    Type: String
  ImagesPath:
    Description: File system path to image files.
    Default: '/mnt/lambda'
    Type: String
  TableName:
    Description: Slide table for image metadata.
    Type: String

Conditions:
  UseStageName: !Not [!Equals [!Ref StageName, '']]

Globals:
  Api:
    OpenApiVersion: '3.0.3'
  Function:
    Environment:
      Variables:
        IMAGES_PATH: !Ref ImagesPath
        ENV_TYPE: !Ref EnvType

Resources:
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:HeadObject'
              - 's3:ListBucket'
              - 's3:GetBucketLocation'
              - 's3:GetObjectVersion'
              - 's3:GetLifecycleConfiguration'
            Resource:
              - !Sub 'arn:aws:s3:::*'
              - !Sub 'arn:aws:s3:::*/*'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VpcId
  TransferImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: transfer_image
      Handler: app.transfer_s3_objects
      Runtime: python3.8
      Timeout: 900
      MemorySize: 3008
      AutoPublishAlias: !Ref EnvType
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystemId
            AccessPoint: !Ref AccessPointId
        - S3ReadPolicy:
            BucketName: '*'
      VpcConfig:
        SecurityGroupIds:
          - Ref: SecurityGroupId
        SubnetIds: !Ref SubnetIds
      FileSystemConfigs:
        - Arn: !Ref AccessPointArn
          LocalMountPath: /mnt/lambda
      Events:
        ImagesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ImagesApi
            Path: /transfer_s3_objects/{bucket}/{prefix}
            Method: POST
  ImageRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: vsv
      Handler: imagerequest.lambda_handler
      Runtime: python3.8
      Timeout: 30
      MemorySize: 768
      Environment:
        Variables:
          ALLOW_ORIGIN: !Ref AllowOrigin
      AutoPublishAlias: !Ref EnvType
      Layers:
        - !Ref OpenSlide
        - !Ref PillowSIMD
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystemId
            AccessPoint: !Ref AccessPointId
        - CloudWatchLambdaInsightsExecutionRolePolicy
      VpcConfig:
        SecurityGroupIds:
          - Ref: SecurityGroupId
        SubnetIds: !Ref SubnetIds
      FileSystemConfigs:
          - Arn: !Ref AccessPointArn
            LocalMountPath: /mnt/lambda
      Events:
        ImagesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ImagesApi
            Path: /DeepZoom/{imagePath+}
            Method: GET
  GenerateTileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: vsv
      Handler: generatetile.lambda_handler
      Runtime: python3.8
      Timeout: 300
      MemorySize: 1536
      AutoPublishAlias: !Ref EnvType
      Layers:
        - !Ref OpenSlide
        - !Ref PillowSIMD
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystemId
            AccessPoint: !Ref AccessPointId
        - CloudWatchLambdaInsightsExecutionRolePolicy
      VpcConfig:
        SecurityGroupIds:
          - Ref: SecurityGroupId
        SubnetIds: !Ref SubnetIds
      FileSystemConfigs:
          - Arn: !Ref AccessPointArn
            LocalMountPath: /mnt/lambda
  DataSyncEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: vsv
      Handler: datasyncevent.lambda_handler
      Runtime: python3.8
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          TILES_FUNCTION_NAME: !Ref GenerateTileFunction
      AutoPublishAlias: !Ref EnvType
      Layers:
        - !Ref OpenSlide
        - !Ref PillowSIMD
        - !Ref libdmtx
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystemId
            AccessPoint: !Ref AccessPointId
        - CloudWatchLambdaInsightsExecutionRolePolicy
      VpcConfig:
        SecurityGroupIds:
          - Ref: SecurityGroupId
        SubnetIds: !Ref SubnetIds
      FileSystemConfigs:
          - Arn: !Ref AccessPointArn
            LocalMountPath: /mnt/lambda
      Events:
        DataSyncLogs:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: /aws/datasync
            FilterPattern: 'NOTICE Verified file'
  OpenSlide:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: openslide
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: makefile
  PillowSIMD:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: pillow-simd
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: makefile
  libdmtx:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: libdmtx
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: makefile
  ImagesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      BinaryMediaTypes: ['*/*']
      EndpointConfiguration:
        Type: REGIONAL

Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !If
      - UseStageName
      - !Sub https://${ImagesApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/
      - !Sub https://${ImagesApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/]
  ApiId:
    Description: Api id of ImagesApi
    Value: !Ref ImagesApi
