AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Top level deployment template for Virtual Slide Viewer'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General parameters
        Parameters:
        - EnvType
        - SupportsConfig
      - Label:
          default: VPC template parameters
        Parameters:
        - AvailabilityZones
      - Label:
          default: Efs template parameters
        Parameters:
        - SourceLocationId
      - Label:
          default: Auth template parameters
        Parameters:
        - FromEmailAddress
        - FromEmailName
        - OAuthScopes
        - AuthDomainPrefix
      - Label:
          default: Web template parameters
        Parameters:
        - DomainName
    ParameterLabels:
      EnvType:
        default: Environment type
      SourceLocationId:
        default: ID of the source location for file transfers via DataSync
      SupportsConfig:
        default: Use AWS Config
      AvailabilityZones:
        default: Availability zones
      FromEmailAddress:
        default: For Cognito Email configuration
      FromEmailName:
        default: For Cognito Email configuration
      OAuthScopes:
        default: The OAuth scopes to request the User Pool to add to the access token JWT
      AuthDomainPrefix:
        default: A custom prefix to use for the sign-up and sign-in pages that are hosted by Amazon Cognito
      DomainName:
        default: Custom FQDN of CloudFront distribution
      OIDCProviderName:
        default: A name for the OIDC provider configuration
      OIDCClientId:
        default: Client ID from OIDC provider
      OIDCClientSecret:
        default: Client secret from OIDC provider
      OIDCIssuerURL:
        default: Issuer URL from OIDC provider
Parameters:
  EnvType:
    Description: Runtime environment type.
    Default: dev
    Type: String
  AppBucketName:
    Type: String
    Description: A legal bucket name.  Must not exist.
  DomainName:
    Type: String
    Description: Custom FQDN of CloudFront distribution
  HostedZoneDomainName:
    Type: String
    Description: hosted zone domain name
  HostedZoneId:
    Type: String
    Description: hosted zone ID
  ViewerCertificateArn:
    Type: String
    Description: ARN of the SSL certificate for the DomainName
  SourceLocationId:
    Type: String
    Description: ID of the source location for file transfers via DataSync
  SupportsConfig:
    Description: Is AWS Config Rules already configured for this region? Use ''false''
      if you are uncertain. See AWS Config Management Console or Deployment Guide
      for details.
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'false'
    Type: String
  AvailabilityZones:
    Description: Availability Zones
    Type: CommaDelimitedList
    Default: us-east-2a, us-east-2b
  FromEmailAddress:
    Type: String
  FromEmailName:
    Type: String
    Default: 'Virtual Slide Viewer'
  OAuthScopes:
    Type: String
    Description: The OAuth scopes to request the User Pool to add to the access token JWT
    Default: "phone, email, profile, openid, aws.cognito.signin.user.admin"
  AuthDomainPrefix:
    Type: String
    Description: A custom prefix to use for the sign-up and sign-in pages that are hosted by Amazon Cognito
  OIDCProviderName:
    Type: String
  OIDCClientId:
    Type: String
    Default: dummy
  OIDCClientSecret:
    Type: String
    Default: dummy
  OIDCIssuerURL:
    Type: String
  ArchiveBucketName:
    Type: String
  PublishBucketName:
    Type: String
  CIDR:
    Description: CIDR block for  VPC
    Type: String
    Default: 10.100.0.0/16
  SubnetACIDR:
    Description: CIDR block for AZ-1b subnet
    Type: String
    Default: 10.100.10.0/24
  SubnetBCIDR:
    Description: CIDR block for AZ-1b subnet
    Type: String
    Default: 10.100.20.0/24

Conditions:
  LoadConfigRulesTemplate:
    !Equals
    - !Ref SupportsConfig
    - 'true'

Resources:
  VpcTemplate:
    Type: AWS::Serverless::Application
    Properties:
      Location: vpc.template.yaml
      Parameters:
        EnvType: !Ref EnvType
        RegionAZ1Name:
          !Select
          - 0
          - !Ref AvailabilityZones
        RegionAZ2Name:
          !Select
          - 1
          - !Ref AvailabilityZones
        CIDR: !Ref CIDR
        SubnetACIDR: !Ref SubnetACIDR
        SubnetBCIDR: !Ref SubnetBCIDR
  EfsTemplate:
    Type: AWS::Serverless::Application
    DependsOn:
      - VpcTemplate
    Properties:
      Location: efs.template.yaml
      Parameters:
        EnvType: !Ref EnvType
        VpcId: !GetAtt [VpcTemplate, Outputs.VpcId]
        Subnets: !GetAtt [VpcTemplate, Outputs.SubnetIds]
        SourceLocationId: !Ref SourceLocationId
        ArchiveBucketName: !Ref ArchiveBucketName
  AuthTemplate:
    Type: AWS::Serverless::Application
    Properties:
      Location: auth.template.yaml
      Parameters:
        AuthDomainPrefix: !Ref AuthDomainPrefix
        DomainName: !Ref DomainName
        FromEmailAddress: !Ref FromEmailAddress
        FromEmailName: !Ref FromEmailName
        OAuthScopes: !Ref OAuthScopes
        OIDCClientId: !Ref OIDCClientId
        OIDCClientSecret: !Ref OIDCClientSecret
        OIDCIssuerURL: !Ref OIDCIssuerURL
        OIDCProviderName: !Ref OIDCProviderName
  DbTemplate:
    Type: AWS::Serverless::Application
    DependsOn:
      - AuthTemplate
    Properties:
      Location: db.template.yaml
      Parameters:
        EnvType: !Ref EnvType
        UserPoolId: !GetAtt [AuthTemplate, Outputs.UserPoolId]
  FuncTemplate:
    Type: AWS::Serverless::Application
    DependsOn:
      - VpcTemplate
      - EfsTemplate
      - DbTemplate
    Properties:
      Location: template.yaml
      Parameters:
        VpcId: !GetAtt [VpcTemplate, Outputs.VpcId]
        RouteTableId: !GetAtt [VpcTemplate, Outputs.RouteTableId]
        Subnets: !GetAtt [VpcTemplate, Outputs.SubnetIds]
        FileSystem: !GetAtt [EfsTemplate, Outputs.FileSystemId]
        EfsSecurityGroup: !GetAtt [EfsTemplate, Outputs.EfsSecurityGroupId]
        AccessPointId: !GetAtt [EfsTemplate, Outputs.AccessPointId]
        AccessPointArn: !GetAtt [EfsTemplate, Outputs.AccessPointArn]
        EnvType: !Ref EnvType
        TableName: !GetAtt [DbTemplate, Outputs.TableName]
        DataSyncTaskArn: !GetAtt [EfsTemplate, Outputs.DataSyncTaskArn]
        ArchiveBucketName: !Ref ArchiveBucketName
        PublishBucketName: !Ref PublishBucketName
  WebTemplate:
    Type: AWS::Serverless::Application
    DependsOn:
      - FuncTemplate
      - AuthTemplate
    Properties:
      Location: web.template.yaml
      Parameters:
        EnvType: !Ref EnvType
        ApiDomain: !GetAtt [FuncTemplate, Outputs.ApiDomain]
        AppBucketName: !Ref AppBucketName
        DomainName: !Ref DomainName
        HostedZoneId: !Ref HostedZoneId
        HostedZoneDomainName: !Ref HostedZoneDomainName
        ViewerCertificateArn: !Ref ViewerCertificateArn
Outputs:
  DynamoDbTableName:
    Value: !GetAtt [DbTemplate, Outputs.TableName]
  ApiUrl:
    Value: !GetAtt [FuncTemplate, Outputs.ApiUrl]
  region:
    Value: !Sub ${AWS::Region}
  AuthUserPoolId:
    Value: !GetAtt [AuthTemplate, Outputs.UserPoolId]
  AuthUserPoolWebClientId:
    Value: !GetAtt [AuthTemplate, Outputs.UserPoolClientId]
  AppsyncGraphqlEndpoint:
    Value: !GetAtt [DbTemplate, Outputs.ApiUrl]
  AppsyncAuthenticationType:
    Value: AMAZON_COGNITO_USER_POOLS