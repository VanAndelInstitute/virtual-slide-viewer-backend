AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Lambda and API Gateway resources for Virtual Slide Viewer'
Parameters:
  StackName:
    Description: Name of the parent of this nested stack.
    Type: String
  VpcId:
    Type: String
    Description: 'VPC ID to use for S3 gateway endpoint'
  RouteTableId:
    Type: String
    Description: 'Route Table ID to use for S3 gateway endpoint'
  Subnets:
    Type: CommaDelimitedList
    Description: 'The list of Subnet IDs, for at least two Availability Zones in the region in your Virtual Private Cloud (VPC)'
  FileSystemId:
    Type: String
    Description: File system id of EfsFileSystem
  EfsSecurityGroup:
    Type: String
    Description: ID of the EFS security group
  AccessPointId:
    Type: String
    Description: ID of AccessPoint
  AccessPointArn:
    Type: String
    Description: ARN of AccessPoint
  EnvType:
    Type: String
    Description: Runtime environment type.
    Default: prod
  SlidesBucketName:
    Type: String
    Description: Name of the bucket for uploading slides.
  PublishBucketName:
    Type: String
    Description: Name of the bucket for making slides public.
  ApiCustomDomain:
    Type: String
    Description: Custom domain for the API endpoint
  HostedZoneName:
    Type: String
    Description: Name of the Route 53 hosted zone
  ApiCertificateArn:
    Type: String
    Description: ARN of the SSL certificate for the API domain name

Globals:
  Api:
    OpenApiVersion: '3.0.3'
  Function:
    Environment:
      Variables:
        ENV_TYPE: !Ref EnvType

Resources:
  SlidesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref SlidesBucketName
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${StackName}-LambdaSecurityGroup
      GroupDescription: VSV security group for Lambda
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - DestinationSecurityGroupId: !Ref EfsSecurityGroup
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          Description: 'Allow access to VSV filesystem on EFS.'
  EfsFromLambdaIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EfsSecurityGroup
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      Description: 'Allow access to VSV filesystem on EFS.'
  IIIF:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackName}-IIIF
      CodeUri: functions/ImageRequest
      Handler: iiif.lambda_handler
      Runtime: python3.8
      Timeout: 15
      MemorySize: 640
      Environment:
        Variables:
          FS_PATH: !Sub '/mnt/${FileSystemId}'
          API_PATH: !Sub https://${ApiCustomDomain}/${EnvType}/image-service/
      Layers:
        - !Ref OpenSlide
        - !Ref PillowSIMD
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystemId
            AccessPoint: !Ref AccessPointId
      VpcConfig:
        SecurityGroupIds:
          - Ref: LambdaSecurityGroup
        SubnetIds: !Ref Subnets
      FileSystemConfigs:
          - Arn: !Ref AccessPointArn
            LocalMountPath: !Sub '/mnt/${FileSystemId}'
      Events:
        ImagesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ImagesApi
            Path: /image-service/{imagePath+}
            Method: GET
  ImportSlide:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackName}-ImportSlide
      CodeUri: functions/ImportSlide
      Handler: importslide.lambda_handler
      Runtime: python3.8
      Timeout: 120
      MemorySize: 1536
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 180
        MaximumRetryAttempts: 0
      Environment:
        Variables:
          FS_PATH: !Sub '/mnt/${FileSystemId}'
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SlidesBucketName
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystemId
            AccessPoint: !Ref AccessPointId
      VpcConfig:
        SecurityGroupIds:
          - Ref: LambdaSecurityGroup
        SubnetIds: !Ref Subnets
      FileSystemConfigs:
          - Arn: !Ref AccessPointArn
            LocalMountPath: !Sub '/mnt/${FileSystemId}'
      Events:
        UploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref SlidesBucket
            Events: s3:ObjectCreated:*
  DeleteFileAsync:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackName}-DeleteFileAsync
      CodeUri: functions/DeleteFiles
      Handler: deletefileasync.lambda_handler
      Runtime: python3.8
      Timeout: 900
      AutoPublishAlias: live
      Environment:
        Variables:
          FS_PATH: !Sub '/mnt/${FileSystemId}'
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref FileSystemId
            AccessPoint: !Ref AccessPointId
      VpcConfig:
        SecurityGroupIds:
          - Ref: LambdaSecurityGroup
        SubnetIds: !Ref Subnets
      FileSystemConfigs:
          - Arn: !Ref AccessPointArn
            LocalMountPath: !Sub '/mnt/${FileSystemId}'
  DeleteFiles:
    Type: AWS::Serverless::Function
    DependsOn:
      - DeleteFileAsync
    Properties:
      FunctionName: !Sub ${StackName}-DeleteFiles
      CodeUri: functions/DeleteFiles
      Handler: deletefiles.lambda_handler
      Runtime: python3.8
      Timeout: 15
      Environment:
        Variables:
          DELETE_FUNCTION: !Ref DeleteFileAsync.Alias
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref DeleteFileAsync
      Events:
        ImagesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ImagesApi
            Path: /Files
            Method: DELETE
  PublishSlides:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackName}-PublishSlides
      CodeUri: functions/PublishSlides
      Handler: publishslides.lambda_handler
      Runtime: python3.8
      Timeout: 15
      Environment:
        Variables:
          SLIDES_BUCKET: !Ref SlidesBucketName
          PUBLISH_BUCKET: !Ref PublishBucketName
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SlidesBucketName
        - S3WritePolicy:
            BucketName: !Ref PublishBucketName
      Events:
        ImagesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ImagesApi
            Path: /PublishSlides
            Method: PUT
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${SlidesBucketName}/*'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref RouteTableId
      VpcId: !Ref VpcId
  LambdaToS3Egress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationPrefixListId: pl-7ba54012
      Description: 'Allow access to S3 gateway VPC endpoint.'
  OpenSlide:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/openslide
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: makefile
  PillowSIMD:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/pillow-simd
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: makefile
  libdmtx:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/libdmtx
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: makefile
  ImagesApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref StackName
      StageName: !Ref EnvType
      BinaryMediaTypes: ['image/*']
      EndpointConfiguration:
        Type: REGIONAL
      Domain:
        DomainName: !Ref ApiCustomDomain
        CertificateArn: !Ref ApiCertificateArn
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneName: !Ref HostedZoneName
        BasePath:
          - !Ref EnvType

Outputs:
  ApiId:
    Description: Api id of ImagesApi
    Value: !Ref ImagesApi
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Sub https://${ApiCustomDomain}/${EnvType}/
